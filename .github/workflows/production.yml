name: Production Continuous Deployment

on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production

jobs:
  Code_quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install dependencies
        run: npm install

      - name: TS Linting
        run: npm run lint:ts

      - name: HTML Linting
        run: npm run lint:html

      - name: Style Linting
        run: npm run lint:style

  Docker_build:
    runs-on: ubuntu-latest
    needs: Code_quality
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        env:
          HEROKU_REGISTRY_URL: registry.heroku.com
        run: |
          export VERSION=$(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
          export IMAGE_NAME=polyglots-tools:$VERSION
          docker build -t $IMAGE_NAME --build-arg PROD=true .
          docker login -u ${{ secrets.HEROKU_EMAIL }} -p ${{ secrets.HEROKU_API_KEY }} $HEROKU_REGISTRY_URL
          docker tag $IMAGE_NAME $HEROKU_REGISTRY_URL/${{ secrets.HEROKU_APP }}/web
          docker push registry.heroku.com/${{ secrets.HEROKU_APP }}/web

  Deploy:
    runs-on: ubuntu-latest
    needs: Docker_build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{secrets.HEROKU_API_KEY}}
        run: |
          npm install heroku
          heroku container:login
          heroku container:release -a "${{ secrets.HEROKU_APP }}" web
